{"version":3,"sources":["components/Author30daysChart.js","components/TotalPostsChart.js","components/TagUsageChart.js","components/PostingTimeChart.js","App.js","serviceWorker.js","index.js"],"names":["array_keys","Array","array_values","index","count","key","author_30_data","push","colors","i","Math","floor","random","toString","data","labels","datasets","backgroundColor","Author30daysChart","Component","totol_posts_30_data","label","TotalPostsChart","posts_per_tag","TagUsageChart","posts_per_hour","PostingTimeChart","App","className","class","to","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAIIA,EAAa,IAAIC,MACjBC,EAAe,IAAID,MAEnBE,EAAQ,EACRC,EAAQ,EACZ,IAAK,IAAIC,KAAOC,EACTH,EAAM,IACLH,EAAWO,KAAKF,GAChBH,EAAaK,KAAKD,EAAeD,KAEjCD,GAAgBE,EAAeD,GAEnCF,IAEJH,EAAWO,KAAK,UAChBL,EAAaK,KAAKH,GAGlB,IADA,IAAII,EAAS,GACLC,EAAE,EAAGA,EAAE,GAAIA,IACjBD,EAAOD,KAAK,IAAIG,KAAKC,MAAoB,SAAdD,KAAKE,UAAmBC,SAAS,KAG9D,IAAMC,EAAO,CACZC,OAAQf,EACRgB,SAAU,CAAC,CACJF,KAAMZ,EACNe,gBAAiBT,KAeVU,EAXf,uKAEI,OACE,6BACE,0EACA,kBAAC,WAAD,CAAUJ,KAAMA,SALxB,GAAuCK,a,QC9BnCnB,EAAa,IAAIC,MACjBC,EAAe,IAAID,MAEvB,IAAK,IAAII,KAAOe,EACZpB,EAAWO,KAAKF,GAChBH,EAAaK,KAAKa,EAAoBf,IAI1C,IADA,IAAIG,EAAS,GACLC,EAAE,EAAGA,EAAE,GAAIA,IACjBD,EAAOD,KAAK,IAAIG,KAAKC,MAAoB,SAAdD,KAAKE,UAAmBC,SAAS,KAG9D,IAAMC,EAAO,CACZC,OAAQf,EACRgB,SAAU,CAAC,CACJK,MAAO,qBACPP,KAAMZ,EACNe,gBAAiBT,KAcVc,EAVf,uKAEQ,OACI,6BACI,kBAAC,MAAD,CAAKR,KAAMA,SAJ3B,GAAqCK,a,QCtBjCnB,EAAa,IAAIC,MACjBC,EAAe,IAAID,MAEnBE,EAAQ,EACRC,EAAQ,EACZ,IAAK,IAAIC,KAAOkB,EACTpB,EAAM,IACLH,EAAWO,KAAKF,GAChBH,EAAaK,KAAKgB,EAAclB,KAEhCD,GAAgBmB,EAAclB,GAElCF,IAEJH,EAAWO,KAAK,UAChBL,EAAaK,KAAKH,GAGlB,IADA,IAAII,EAAS,GACLC,EAAE,EAAGA,EAAE,GAAIA,IACjBD,EAAOD,KAAK,IAAIG,KAAKC,MAAoB,SAAdD,KAAKE,UAAmBC,SAAS,KAG9D,IAAMC,EAAO,CACZC,OAAQf,EACRgB,SAAU,CAAC,CACJF,KAAMZ,EACNe,gBAAiBT,KAeVgB,EAXf,uKAEI,OACE,6BACE,wDACA,kBAAC,MAAD,CAAKV,KAAMA,SALnB,GAAmCK,a,QC9B/BnB,EAAa,IAAIC,MACjBC,EAAe,IAAID,MAEvB,IAAK,IAAII,KAAOoB,EACZzB,EAAWO,KAAKF,GAChBH,EAAaK,KAAKkB,EAAepB,IAIrC,IADA,IAAIG,EAAS,GACLC,EAAE,EAAGA,EAAE,GAAIA,IACjBD,EAAOD,KAAK,IAAIG,KAAKC,MAAoB,SAAdD,KAAKE,UAAmBC,SAAS,KAG9D,IAAMC,EAAO,CACZC,OAAQf,EACRgB,SAAU,CAAC,CACJF,KAAMZ,EACNe,gBAAiBT,KAeVkB,EAXf,uKAEI,OACE,6BACE,oEACA,kBAAC,QAAD,CAAOZ,KAAMA,SALrB,GAAsCK,a,eCyBvBQ,MA1Cf,WAAgB,IAAD,EACb,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KACE,6BACE,4BAAKA,UAAU,OAAf,0BAA+B,OAA/B,sBAA4C,CAAC,iBAAiB,QAA9D,GACE,yBAAKA,UAAU,6BAAf,mDAIF,yBAAKC,MAAM,OACT,yBAAKA,MAAM,aAEX,yBAAKA,MAAM,YACT,kBAAC,IAAD,CAAMC,GAAI,qBAAsBF,UAAU,yBAA1C,mCAEF,yBAAKC,MAAM,YACT,kBAAC,IAAD,CAAMC,GAAI,mBAAoBF,UAAU,yBAAxC,6BAEF,yBAAKC,MAAM,YACT,kBAAC,IAAD,CAAMC,GAAI,iBAAkBF,UAAU,yBAAtC,6BAEF,yBAAKC,MAAM,YACT,kBAAC,IAAD,CAAMC,GAAI,oBAAqBF,UAAU,yBAAzC,6BAEF,yBAAKC,MAAM,eAIf,yBAAKD,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOG,KAAK,qBAAqBC,UAAWd,IAC5C,kBAAC,IAAD,CAAOa,KAAK,mBAAmBC,UAAWV,IAC1C,kBAAC,IAAD,CAAOS,KAAK,iBAAiBC,UAAWR,IACxC,kBAAC,IAAD,CAAOO,KAAK,oBAAoBC,UAAWN,SC9BnCO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0283da13.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Doughnut } from 'react-chartjs-2'; \r\nimport author_30_data from '../json/posts_per_author_30.json'\r\n\r\nvar array_keys = new Array();\r\nvar array_values = new Array();\r\n\r\nlet index = 0\r\nlet count = 0\r\nfor (var key in author_30_data) {\r\n    if(index<30) {\r\n        array_keys.push(key);\r\n        array_values.push(author_30_data[key]);\r\n    }else{\r\n        count = count + author_30_data[key];\r\n    }\r\n    index++;\r\n}\r\narray_keys.push('Others');\r\narray_values.push(count);\r\n\r\nlet colors = []\r\nfor(var i=0; i<30; i++) {\r\n  colors.push('#'+Math.floor(Math.random()*16777215).toString(16));\r\n}\r\n\r\nconst data = {\r\n\tlabels: array_keys,\r\n\tdatasets: [{\r\n        data: array_values,\r\n        backgroundColor: colors\r\n    }],\r\n};\r\n\r\nexport class Author30daysChart extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>作者活跃度统计</h2>\r\n        <Doughnut data={data} /> \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Author30daysChart  \r\n","import React, { Component } from 'react'\r\nimport { Bar } from 'react-chartjs-2';\r\nimport totol_posts_30_data from '../json/total_posts_30.json'\r\n\r\nvar array_keys = new Array();\r\nvar array_values = new Array();\r\n\r\nfor (var key in totol_posts_30_data) {\r\n    array_keys.push(key);\r\n    array_values.push(totol_posts_30_data[key]);\r\n}\r\n\r\nlet colors = []\r\nfor(var i=0; i<30; i++) {\r\n  colors.push('#'+Math.floor(Math.random()*16777215).toString(16));\r\n}\r\n\r\nconst data = {\r\n\tlabels: array_keys,\r\n\tdatasets: [{\r\n        label: '发帖数',\r\n        data: array_values,\r\n        backgroundColor: colors\r\n    }],\r\n};\r\n\r\nexport class TotalPostsChart extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Bar data={data} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TotalPostsChart  \r\n","import React, { Component } from 'react'\r\nimport {Pie} from 'react-chartjs-2';\r\nimport posts_per_tag from '../json/posts_per_tag_30.json'\r\n\r\nvar array_keys = new Array();\r\nvar array_values = new Array();\r\n\r\nlet index = 0\r\nlet count = 0\r\nfor (var key in posts_per_tag) {\r\n    if(index<20) {\r\n        array_keys.push(key);\r\n        array_values.push(posts_per_tag[key]);\r\n    }else{\r\n        count = count + posts_per_tag[key];\r\n    }\r\n    index++;\r\n}\r\narray_keys.push('Others');\r\narray_values.push(count);\r\n\r\nlet colors = []\r\nfor(var i=0; i<20; i++) {\r\n  colors.push('#'+Math.floor(Math.random()*16777215).toString(16));\r\n}\r\n\r\nconst data = {\r\n\tlabels: array_keys,\r\n\tdatasets: [{\r\n        data: array_values,\r\n        backgroundColor: colors\r\n    }],\r\n};\r\n\r\nexport class TagUsageChart extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>标签使用</h2>\r\n        <Pie data={data} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TagUsageChart  \r\n","import React, { Component } from 'react'\r\nimport { Polar } from 'react-chartjs-2'; \r\nimport posts_per_hour from '../json/posts_per_hour_30.json'\r\n\r\nvar array_keys = new Array();\r\nvar array_values = new Array();\r\n\r\nfor (var key in posts_per_hour) {\r\n    array_keys.push(key);\r\n    array_values.push(posts_per_hour[key]);\r\n}\r\n\r\nlet colors = []\r\nfor(var i=0; i<24; i++) {\r\n  colors.push('#'+Math.floor(Math.random()*16777215).toString(16));\r\n}\r\n\r\nconst data = {\r\n\tlabels: array_keys,\r\n\tdatasets: [{\r\n        data: array_values,\r\n        backgroundColor: colors\r\n    }],\r\n};\r\n\r\nexport class PostingTimeChart extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>发帖时间统计</h2>\r\n        <Polar data={data} /> \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostingTimeChart  \r\n","import React from 'react';\nimport './App.css';\nimport Author30daysChart from './components/Author30daysChart'\nimport TotalPostsChart from './components/TotalPostsChart'\nimport TagUsageChart from './components/TagUsageChart'\nimport PostingTimeChart from './components/PostingTimeChart'\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <div>\n          <div className=\"row\" className=\"hdr\" style={{\"padding-bottom\":\"2em\"}}>\n            <div className=\"col-sm-12 btn btn-warning\">\n              Hive中文区数据统计\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-sm-2\">\n            </div>\n            <div class=\"col-sm-2\">\n              <Link to={'/Author30daysChart'} className=\"nav-link btn btn-info\">作者活跃度</Link>\n            </div>\n            <div class=\"col-sm-2\">\n              <Link to={'/TotalPostsChart'} className=\"nav-link btn btn-info\">发帖总数</Link>\n            </div>\n            <div class=\"col-sm-2\">\n              <Link to={'/TagUsageChart'} className=\"nav-link btn btn-info\">标签使用</Link>\n            </div>\n            <div class=\"col-sm-2\">\n              <Link to={'/PostingTimechart'} className=\"nav-link btn btn-info\">发帖时间</Link>\n            </div>\n            <div class=\"col-sm-2\">\n            </div>\n          </div>\n        </div>\n        <div className=\"container\">\n          <Switch>\n            <Route path='/Author30daysChart' component={Author30daysChart} />\n            <Route path='/TotalPostsChart' component={TotalPostsChart} />\n            <Route path='/TagUsageChart' component={TagUsageChart} />\n            <Route path='/PostingTimechart' component={PostingTimeChart} />\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}